{"version":3,"sources":["assets/img/loading.svg","serviceWorker.js","components/Board/Board.js","components/NavPad/NavPad.js","components/Modal/Modal.js","components/TopScorers/TopScorers.js","components/GameOver/GameOver.js","constants/enums.js","components/UserName/UserName.js","components/Menu/Settings/Settings.js","components/Menu/About/About.js","components/Menu/Menu/Menu.js","components/Game/Game.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Board","React","memo","grid","showGridBorder","className","map","row","rowIndex","key","column","colIndex","NavPad","props","onClick","_direction","vibration","navigator","vibrate","innerSize","width","height","landscape","style","render","Modal","open","header","children","onFooterClick","footer","TopScorers","useState","onClose","onBack","GameOver","record","useRef","store","get","hasNewRecord","setHasNewRecord","useEffect","score","current","set","userName","axios","post","name","then","response","catch","err","console","error","onKeyPress","e","keyCode","playAgain","document","addEventListener","removeEventListener","menuOptions","settings","themes","candySnake","value","colorSnake","deSnaker","UserName","setUserName","onSave","initialCheck","_settings","updateSettings","updateUserName","type","onChange","test","target","Settings","userNameModalOpen","setUserNameModalOpen","hasChanges","setHasChanges","theme","setSettings","checked","apply","prevSettings","Object","values","About","showMenu","setShowMenu","selectedOption","setSelectedOption","topScorers","about","keys","FOOD_OPTIONS","Game","layout","gridSize","navPadSize","setGrid","x","y","snake","setSnake","stomach","setStomach","direction","setDirection","getRandomFood","food","setFood","setScore","setIntervalId","gameOver","setGameOver","search","themeKey","URLSearchParams","find","t","toLowerCase","getLayout","innerHeight","innerPadding","innerWidth","moveSnake","useCallback","_snake","head","length","max","WIDTH","HEIGHT","some","s","removeTail","_food","_stomach","foodIndex","findIndex","f","eatenFood","splice","push","stomachLength","foodScore","Math","abs","prevScore","shift","_grid","r","c","forEach","i","makeGrid","changeDirection","prevIntervalId","clearInterval","floor","random","foodOption","reset","interval","setInterval","prevFood","newFood","maxFoodCount","cell","concat","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4b8b7778.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.aaba0c03.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"./Board.css\";\n\n// Use memo, so that render will happen once per props change (grid)\nexport const Board = React.memo(({ grid, showGridBorder }) => {\n  function render() {\n    return (\n      <table\n        className={`board ${showGridBorder === false ?\"borderless\" : \"\"}`}\n      >\n        <tbody>\n          {grid.map((row, rowIndex) => {\n            return (\n              <tr key={rowIndex}>\n                {row.map((column, colIndex) => {\n                  return (\n                    <td key={colIndex} className={column}>\n                      <div>\n                        <span />\n                      </div>\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n  return render();\n});\n","import React from \"react\";\nimport \"./NavPad.css\";\n\n/*\n<NavPad\n    onClick={changeDirection}\n    width={navPadSize.width}\n    height={navPadSize.height}\n    landscape={landscape}\n    vibration={settings.vibration}\n  />\n*/\n\n// Controller pad to be used in mobile devices\nexport const NavPad = React.memo((props) => {\n  function onClick(_direction) {\n    props.onClick(_direction);\n    if (props.vibration) {\n      window.navigator.vibrate(10);\n    }\n  }\n\n  function render() {\n    const innerSize =\n      props.width < props.height ? props.width : props.height + \"px\";\n    return (\n      <div\n        className={\"navpad\" + (props.landscape ? \" landscape\" : \"\")}\n        style={{ width: props.width + \"px\", height: props.height + \"px\" }}\n      >\n        <div className=\"inner\" style={{ width: innerSize, height: innerSize }}>\n          <div className=\"buttons\">\n            <button className=\"up\" onClick={() => onClick(\"up\")}>\n              <span></span>\n            </button>\n            <button className=\"right\" onClick={() => onClick(\"right\")}>\n              <span></span>\n            </button>\n            <button className=\"left\" onClick={() => onClick(\"left\")}>\n              <span></span>\n            </button>\n            <button className=\"down\" onClick={() => onClick(\"down\")}>\n              <span></span>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return render();\n});\n","import React from \"react\";\nimport \"./Modal.css\";\n\n/*\n  <Modal\n      open={true}\n      header=\"MENU\"\n      footer={<div onClick={() => setShowMenu(false)}>CLOSE</div>}>\n    Body here\n  </Modal>\n*/\nexport default function Modal(props) {\n  function render() {\n    return (\n      props.open && (\n        <div className=\"modal-wrapper\">\n          <div className=\"modal\">\n            <div className=\"modal-header\">{props.header}</div>\n            <div className=\"modal-body\">{props.children}</div>\n            <div className=\"modal-footer\" onClick={props.onFooterClick}>{props.footer}</div>\n          </div>\n        </div>\n      )\n    );\n  }\n  return render();\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./TopScorers.css\";\nimport loadingImage from \"../../assets/img/loading.svg\";\nimport axios from \"axios\";\nimport Modal from \"../Modal/Modal\";\n\nexport default function TopScorers(props) {\n  const [topScorers, setTopScorers] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // database information getter\n  // useEffect(() => {\n  //   axios\n  //     .get(\"/.netlify/functions/get-top-scorers\")\n  //     .then((response) => {\n  //       setTopScorers(response.data.data);\n  //     })\n  //     .catch((err) => {\n  //       console.error(err);\n  //     })\n  //     .then(function () {\n  //       setLoading(false);\n  //     });\n  // }, []);\n\n  return (\n    <Modal\n      open={true}\n      header=\"TOP SCORERS\"\n      footer={\n        <div className=\"d-flex\">\n          {props.onClose && (\n            <div className=\"float-left w-100\" onClick={props.onClose}>\n              CLOSE\n            </div>\n          )}\n          {props.onBack && (\n            <div className=\"float-right w-100\" onClick={props.onBack}>\n              BACK\n            </div>\n          )}\n        </div>\n      }\n    >\n      {/* <div className=\"top-scorers\">\n        {loading ? (\n          <img src={loadingImage} alt=\"loading...\" />\n        ) : topScorers && topScorers.length > 0 ? (\n          <ul>\n            {topScorers.map((ts, index) => (\n              <li\n                key={index}\n                className={\n                  \"d-flex\" + (ts.data.name === props.userName ? \" active\" : \"\")\n                }\n              >\n                <span style={{ marginRight: index < 3 ? \"12px\" : \"15px\" }}>\n                  {index < 3 ? (\n                    <svg viewBox=\"0 0 24 24\">\n                      <path\n                        fill={\n                          index === 0\n                            ? \"gold\"\n                            : index === 1\n                            ? \"silver\"\n                            : \"#CD7F32\"\n                        }\n                        d=\"M18 2C17.1 2 16 3 16 4H8C8 3 6.9 2 6 2H2V11C2 12 3 13 4 13H6.2C6.6 15 7.9 16.7 11 17V19.08C8 19.54 8 22 8 22H16C16 22 16 19.54 13 19.08V17C16.1 16.7 17.4 15 17.8 13H20C21 13 22 12 22 11V2H18M6 11H4V4H6V11M20 11H18V4H20V11Z\"\n                      />\n                    </svg>\n                  ) : (\n                    index + 1\n                  )}\n                </span>\n                <span className=\"w-100\">{ts.data.name}</span>\n                <span>{ts.data.score}</span>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <span>Nothing found here, try again later</span>\n        )}\n      </div> */}\n    </Modal>\n  );\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport \"./GameOver.css\";\nimport store from \"store\";\nimport axios from \"axios\";\nimport TopScorers from \"../TopScorers/TopScorers\";\n\nexport default function GameOver(props) {\n  const record = useRef(store.get(\"record\") || 0); // get user's best score stored in browser memory\n  const [hasNewRecord, setHasNewRecord] = useState(false);\n  // const [showTopScorers, setShowTopScorers] = useState(false);\n\n  useEffect(() => {\n    if (props.score > record.current) {\n      store.set(\"record\", props.score);\n      setHasNewRecord(true);\n\n      if (props.userName) {\n        axios\n          .post(\"/.netlify/functions/create-top-scorer\", {\n            name: props.userName,\n            score: props.score,\n          })\n          .then((response) => {\n            // console.log(response);\n          })\n          .catch((err) => {\n            console.error(err);\n          });\n      }\n    }\n  }, [props.score, props.userName]);\n\n  useEffect(() => {\n    // play again when spacebar pressed on keyboard\n    function onKeyPress(e) {\n      if (e.keyCode === 32) {\n        props.playAgain();\n      }\n    }\n    document.addEventListener(\"keydown\", onKeyPress);\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyPress);\n    };\n  }, [props]);\n\n  function render() {\n    // if (showTopScorers) {\n    //   return (\n    //     <TopScorers\n    //       onBack={() => setShowTopScorers(false)}\n    //       userName={props.userName}\n    //     />\n    //   );\n    // }\n    return (\n      <Modal\n        open={true}\n        header=\"GAME OVER\"\n        footer=\"PLAY AGAIN\"\n        onFooterClick={props.playAgain}\n      >\n        <div className=\"game-over\">\n          <h3>YOUR SCORE</h3>\n          <h1>{props.score}</h1>\n          {hasNewRecord && (\n            <h4>\n              <p>Congratulations!</p> New record!\n            </h4>\n          )}\n          {/* {\n            record.current && parseInt(record.current) > 0 ? (\n              <h5 className=\"d-flex\">\n                <span className=\"w-100 float-left\">\n                  {hasNewRecord ? \"Your old record\" : \"Your record\"}:{\" \"}\n                  {record.current}\n                </span>\n                <span\n                  className=\"w-100 float-right cursor-pointer\"\n                  onClick={() => setShowTopScorers(true)}\n                >\n                  Top scorers\n                </span>\n              </h5>\n            ) : null // on purpose\n          } */}\n        </div>\n      </Modal>\n    );\n  }\n  return render();\n}\n","export const menuOptions = {\n  settings: \"Settings\",\n};\n\n// order matters\nexport const themes = {\n  candySnake: { key: \"candySnake\", value: \"Candy Snake\" },\n  colorSnake: { key: \"colorSnake\", value: \"Color Snake\" },\n  deSnaker: { key: \"deSnaker\", value: \"DeSnaker\" },\n};\n","import React, { useState } from \"react\";\nimport \"./UserName.css\";\nimport Modal from \"../Modal/Modal\";\nimport store from \"store\";\n\n/*\n <UserName\n  /// Case 1 - prompting username first time ever\n  initialCheck={true}    // first time user visits game - no username set yet\n  settings={settings}\n  updateSettings={setSettings} \n\n  /// Case 2 - updating username through settings\n  onBack={() => setUserNameModalOpen(false)}\n  userName={settings.userName}\n  updateUserName={updateUserName} />\n*/\nexport default function UserName(props) {\n  const [userName, setUserName] = useState(props.userName || \"\");\n\n  function onChange(e) {\n    var re = /^$|[a-zA-Z0-9-_]+$/;\n    if (re.test(e.target.value)) {\n      setUserName(e.target.value);\n    }\n  }\n\n  function onSave() {\n    if (userName) {\n      if (props.initialCheck) {\n        const _settings = { ...props.settings, userName };\n        store.set(\"settings\", _settings);\n        props.updateSettings({ ..._settings });\n      } else {\n        props.updateUserName(userName);\n        props.onBack();\n      }\n    }\n  }\n\n  return (\n    <Modal\n      open={true}\n      header=\"USERNAME\"\n      footer={\n        props.initialCheck ? (\n          <div className=\"\" onClick={onSave}>\n            LET'S PLAY\n          </div>\n        ) : (\n          <div>\n            <div className=\"float-right w-50\" onClick={props.onBack}>\n              BACK\n            </div>\n            <div\n              className={\"float-left w-50\" + (userName ? \"\" : \" disabled\")}\n              onClick={onSave}\n            >\n              SAVE\n            </div>\n          </div>\n        )\n      }\n    >\n      <div className=\"username\">\n        <input\n          type=\"text\"\n          name=\"userName\"\n          value={userName}\n          onChange={onChange}\n        />\n        <legend>\n          This username will appear in top scorers if you can make it to the\n          list\n        </legend>\n      </div>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { themes } from \"../../../constants/enums\";\nimport store from \"store\";\nimport Modal from \"./../../Modal/Modal\";\nimport UserName from \"../../UserName/UserName\";\nimport \"./Settings.css\";\n\n/*\n <Settings\n    settings={props.settings}\n    updateSettings={props.updateSettings}\n    onBack={() => setSelectedOption(null)} />\n*/\nexport default function Settings(props) {\n  const [userNameModalOpen, setUserNameModalOpen] = useState(false);\n  const [hasChanges, setHasChanges] = useState(false);\n  const [settings, setSettings] = useState({\n    vibration: false,\n    showGridBorder: true,\n    theme: themes.candySnake,\n    userName: \"\",\n  });\n\n  useEffect(() => {\n    setSettings((prevSettings) => {\n      return { ...prevSettings, ...props.settings };\n    });\n  }, [props.settings]);\n\n  function onChange(e) {\n    let { name, value, checked, type } = e.target;\n    const _settings = { ...settings };\n\n    if (type === \"checkbox\") {\n      _settings[name] = checked;\n    } else if (type === \"select-one\") {\n      if (name === \"theme\") {\n        value = themes[value];\n      }\n      _settings[name] = value;\n    }\n    setSettings(_settings);\n    setHasChanges(true);\n  }\n\n  function apply() {\n    store.set(\"settings\", settings);\n    props.updateSettings({ ...settings });\n    setHasChanges(false);\n  }\n\n  function updateUserName(userName) {\n    setSettings((prevSettings) => {\n      return { ...prevSettings, userName };\n    });\n    setHasChanges(true);\n  }\n\n  function render() {\n    if (userNameModalOpen) {\n      return (\n        <UserName\n          onBack={() => setUserNameModalOpen(false)}\n          userName={settings.userName}\n          updateUserName={updateUserName}\n        />\n      );\n    }\n    return (\n      <Modal\n        open={true}\n        header=\"SETTINGS\"\n        footer={\n          <div>\n            <div className=\"float-right w-50\" onClick={props.onBack}>\n              BACK\n            </div>\n            <div\n              className={\"float-left w-50\" + (hasChanges ? \"\" : \" disabled\")}\n              onClick={apply}\n            >\n              APPLY\n            </div>\n          </div>\n        }\n      >\n        <div className=\"settings\">\n          <ul>\n            <li className=\"d-flex\">\n              <span className=\"w-100 text-left\">Theme</span>\n              <select\n                name=\"theme\"\n                value={settings.theme.key}\n                onChange={onChange}\n                className=\"float-right\"\n              >\n                {Object.values(themes).map((theme) => (\n                  <option key={theme.key} value={theme.key}>\n                    {theme.value}\n                  </option>\n                ))}\n              </select>\n            </li>\n            <li className=\"d-flex\">\n              <span className=\"w-100 text-left\">Grid border</span>\n              <span>\n                <label className=\"checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"showGridBorder\"\n                    onChange={onChange}\n                    checked={settings.showGridBorder}\n                  />\n                  <span className=\"checkmark\"></span>\n                </label>\n              </span>\n            </li>\n            <li className=\"d-flex\">\n              <span className=\"w-100 text-left\">Username</span>\n              <span\n                className=\"w-100 text-right cursor-pointer\"\n                onClick={() => setUserNameModalOpen(true)}\n              >\n                {settings.userName || \"Not set\"}\n              </span>\n            </li>\n          </ul>\n          <h4>Mobile</h4>\n          <ul>\n            <li>\n              <span>Vibration</span>\n              <span>\n                <label className=\"checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"vibration\"\n                    onChange={onChange}\n                    checked={settings.vibration}\n                  />\n                  <span className=\"checkmark\"></span>\n                </label>\n              </span>\n            </li>\n          </ul>\n        </div>\n      </Modal>\n    );\n  }\n  return render();\n}\n","import React from \"react\";\nimport Modal from \"./../../Modal/Modal\";\nimport \"./About.css\";\n\nexport default function About(props) {\n  return (\n    <Modal\n      open={true}\n      header=\"TOP SCORERS\"\n      footer={\n        <div>\n          <div className=\"float-right w-50\" onClick={props.onBack}>\n            BACK\n          </div>\n          <div className=\"float-left w-50\" onClick={props.onClose}>\n            CLOSE\n          </div>\n        </div>\n      }\n    >\n      <div className=\"about\">\n        <h3 className=\"margin-top-0\">Welcome to Candy Snake</h3>\n        Snake games are awesome, but they are all same... We wanted to build a\n        little modernized one. In traditional snake games goal is to eat as much\n        food as possible so that snake will be as long as possible. Despite of\n        that in Candy Snake the goal is to eat wisely to stay shorter as longer\n        snake means harder game due to less space. To achieve that player needs\n        to eat food with the same type as much as possible. Eating 3 food with\n        same type in a row will cause a burst effect. Burst effect won't only\n        shorten the snake but will also triple the score got by eating 3 food\n        lastly.\n        <br />\n        Every type of food is different from score perspective. And remember,\n        not every single food brings positive score ;) It is on you - the player\n        to find out which food... Good news, burst effect will still bring\n        positive score with food that has negative score.\n        <br />\n        There is a limit on the number of food that will be lying on the board.\n        To push the game to generate new food, player has to eat existing ones.\n        It is good idea to be careful when doing so.\n        <br />\n        <br />\n      </div>\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./Menu.css\";\nimport Modal from \"../../Modal/Modal\";\nimport { menuOptions } from \"../../../constants/enums\";\nimport Settings from \"./../Settings/Settings\";\nimport TopScorers from \"../../TopScorers/TopScorers\";\nimport About from \"./../About/About\";\n\n/*\n  <Menu\n    settings={settings}\n    updateSettings={setSettings} />\n*/\nexport default function (props) {\n  const [showMenu, setShowMenu] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  function onBack() {\n    setSelectedOption(null);\n  }\n\n  function onClose() {\n    setSelectedOption(null);\n    setShowMenu(false);\n  }\n\n  function getMenuOption() {\n    if (selectedOption === menuOptions.settings) {\n      return (\n        <Settings\n          settings={props.settings}\n          updateSettings={props.updateSettings}\n          onBack={() => setSelectedOption(null)}\n        />\n      );\n    } else if (selectedOption === menuOptions.topScorers) {\n      return (\n        <TopScorers\n          onBack={onBack}\n          onClose={onClose}\n          userName={props.settings.userName}\n        />\n      );\n    } else if (selectedOption === menuOptions.about) {\n      return <About onBack={onBack} onClose={onClose} />;\n    } else {\n      return (\n        <Modal\n          open={true}\n          header=\"MENU\"\n          footer={<div onClick={() => setShowMenu(false)}>CLOSE</div>}\n        >\n          <div className=\"menu\">\n            <ul>\n              {Object.keys(menuOptions).map((key) => (\n                <li key={key}>\n                  <span onClick={() => setSelectedOption(menuOptions[key])}>\n                    {menuOptions[key]}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </Modal>\n      );\n    }\n  }\n\n  return (\n    <div className=\"menu-wrapper\">\n      <div className=\"dots\" onClick={() => setShowMenu(true)}>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n      {showMenu && getMenuOption()}\n    </div>\n  );\n}\n","import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport \"./Game.css\";\nimport { Board } from \"./../Board/Board\";\nimport { NavPad } from \"./../NavPad/NavPad\";\nimport GameOver from \"./../GameOver/GameOver\";\nimport store from \"store\";\nimport Menu from \"../Menu/Menu/Menu\";\nimport { themes } from \"../../constants/enums\";\nimport UserName from \"../UserName/UserName\";\n\nconst WIDTH = 12;\nconst HEIGHT = 12;\nconst SNAKE_SPEED = 150;\nconst FOOD_SPAWN_SPEED = 3000;\nconst FOOD_OPTIONS = [\n  { type: \"red\", score: 1 },\n  { type: \"green\", score: 2 },\n  { type: \"blue\", score: 3 },\n  { type: \"orange\", score: 4 },\n  { type: \"gold\", score: 10 },\n  { type: \"black\", score: -5 },\n];\n\nexport default function Game() {\n  const layout = useRef({ gridSize: {}, navPadSize: {}, landscape: false });\n  const [settings, setSettings] = useState({});\n  const [grid, setGrid] = useState([]);\n  const [snake, setSnake] = useState([{ x: 0, y: 0 }]);\n  const [stomach, setStomach] = useState([]);\n  const [direction, setDirection] = useState(\"right\");\n  const [food, setFood] = useState([getRandomFood()]);\n  const [score, setScore] = useState(0);\n  const [intervalId, setIntervalId] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  // one time mounted stuff here\n  useEffect(() => {\n    // get settings stored in browser memory\n    const _settings = store.get(\"settings\") || {};\n\n    // read theme from url and set it in settings (below) as default if none is set\n    if (window.location.search && !_settings.theme) {\n      const themeKey = new URLSearchParams(window.location.search).get(\"theme\");\n      if (themeKey) {\n        const theme = Object.values(themes).find(\n          (t) => t.key.toLowerCase() === themeKey.toLowerCase()\n        );\n        if (theme) {\n          _settings.theme = theme;\n        }\n      }\n    }\n    setSettings(_settings);\n\n    // detect screen size change, adjust grid size based on it, place navpad based on ladscape/portrait mode\n    function getLayout() {\n      const headerheight = 50;\n      const innerPadding = 25;\n      const innerHeight = window.innerHeight - innerPadding * 2;\n      const innerWidth = window.innerWidth - innerPadding * 2;\n\n      if (innerWidth < innerHeight) {\n        layout.current = {\n          landscape: false,\n          gridSize: {\n            height: innerWidth + headerheight,\n            width: innerWidth,\n          },\n        };\n        layout.current.navPadSize = {\n          height: innerHeight - layout.current.gridSize.height,\n          width: layout.current.gridSize.width,\n        };\n      } else {\n        layout.current = {\n          landscape: true,\n          gridSize: {\n            height: innerHeight,\n            width: innerHeight - headerheight,\n          },\n        };\n        layout.current.navPadSize = {\n          height: layout.current.gridSize.height,\n          width: innerWidth - layout.current.gridSize.width,\n        };\n      }\n    }\n    getLayout(); // initial call\n\n    window.addEventListener(\"resize\", getLayout);\n    return () => {\n      window.removeEventListener(\"resize\", getLayout);\n    };\n  }, []);\n\n  const moveSnake = useCallback(\n    (_direction) => {\n      // make the grid to display\n      function makeGrid(_snake, _food, _stomach) {\n        const _grid = [];\n\n        for (let r = 0; r < HEIGHT; r++) {\n          const row = [];\n          for (let c = 0; c < WIDTH; c++) {\n            row.push(null);\n          }\n          _grid.push(row);\n        }\n\n        // coordinates in which snake is located\n        _snake.forEach((s, i) => {\n          _grid[s.y][s.x] = `snake ${\n            i === _snake.length - 1 ? `head ${_direction}` : _stomach[i] || \"\"\n          }`;\n        });\n\n        // coordinates in which food is located\n        _food.forEach((f) => {\n          var cell = _grid[f.y][f.x];\n          if (cell === null) {\n            _grid[f.y][f.x] = `food ${f.type}`;\n          }\n        });\n\n        setGrid(_grid);\n      }\n\n      const _snake = [...snake];\n      const head = { ..._snake[_snake.length - 1] }; // head doesn't store food\n      const max = { x: WIDTH - 1, y: HEIGHT - 1 };\n      switch (_direction) {\n        case \"right\":\n          head.x++;\n          head.x = head.x > max.x ? 0 : head.x;\n          break;\n        case \"left\":\n          head.x--;\n          head.x = head.x < 0 ? max.x : head.x;\n          break;\n        case \"up\":\n          head.y--;\n          head.y = head.y < 0 ? max.y : head.y;\n          break;\n        case \"down\":\n          head.y++;\n          head.y = head.y > max.y ? 0 : head.y;\n          break;\n        default:\n          break;\n      }\n\n      // touched itself\n      if (_snake.some((s) => s.x === head.x && s.y === head.y)) {\n        setGameOver(true);\n        return;\n      }\n\n      let removeTail = true;\n      let _food = [...food];\n      let _stomach = [...stomach];\n\n      const foodIndex = _food.findIndex(\n        (f) => f.x === head.x && f.y === head.y\n      );\n      // ate food\n      if (foodIndex > -1) {\n        removeTail = false; // keep tail, got longer\n        const eatenFood = _food[foodIndex];\n        _food.splice(foodIndex, 1); // remove eaten food from board\n        _stomach.push(eatenFood.type);\n        const stomachLength = _stomach.length;\n\n        let foodScore = eatenFood.score;\n        if (stomachLength >= 3) {\n          // 3 same type of food in a row in stomach is burst\n          if (\n            _stomach[stomachLength - 1] === _stomach[stomachLength - 2] &&\n            _stomach[stomachLength - 2] === _stomach[stomachLength - 3]\n          ) {\n            foodScore = Math.abs(foodScore) + Math.abs(10 * foodScore);\n            _stomach.splice(stomachLength - 3, 3); // remove last 3 food from stomach\n            _snake.splice(0, 3); // remove first 3 nodes from snake (tails)\n          }\n        }\n        setScore((prevScore) => prevScore + foodScore);\n      }\n\n      _snake.push(head);\n\n      if (removeTail) {\n        _snake.shift();\n      }\n\n      setStomach(_stomach);\n      setFood(_food);\n      setSnake(_snake);\n      makeGrid(_snake, _food, _stomach, _direction);\n    },\n    [snake, stomach, food]\n  );\n\n  const changeDirection = useCallback(\n    (_direction) => {\n      if (\n        !gameOver &&\n        _direction &&\n        // not same direction\n        _direction !== direction &&\n        // moving reverse not allowed\n        ((_direction === \"right\" && direction !== \"left\") ||\n          (_direction === \"left\" && direction !== \"right\") ||\n          (_direction === \"up\" && direction !== \"down\") ||\n          (_direction === \"down\" && direction !== \"up\"))\n      ) {\n        moveSnake(_direction);\n        setDirection(_direction);\n        setIntervalId((prevIntervalId) => {\n          clearInterval(prevIntervalId);\n          return null;\n        });\n      }\n    },\n    [moveSnake, direction, gameOver]\n  );\n\n  // move snake in a direction continiously or with user input\n  useEffect(() => {\n    function onKeyPress(e) {\n      changeDirection(\n        e.keyCode === 37\n          ? \"left\"\n          : e.keyCode === 38\n          ? \"up\"\n          : e.keyCode === 39\n          ? \"right\"\n          : e.keyCode === 40\n          ? \"down\"\n          : null\n      );\n    }\n\n    let interval;\n    if (!gameOver) {\n      // keep snake moving\n      interval = setInterval(() => {\n        moveSnake(direction);\n      }, SNAKE_SPEED);\n      setIntervalId(interval);\n\n      document.addEventListener(\"keydown\", onKeyPress);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyPress);\n      clearInterval(interval);\n    };\n  }, [direction, moveSnake, gameOver, changeDirection]);\n\n  // generate certain number of food periodically if needed\n  useEffect(() => {\n    let interval;\n    if (!gameOver) {\n      function makeFood() {\n        setFood((prevFood) => {\n          // max number of food possible to have on board\n          const maxFoodCount = (WIDTH * HEIGHT) / 20;\n          if (prevFood.length < maxFoodCount) {\n            const newFood = [];\n            // max number of new food can be generated each time\n            for (let i = 0; i <= maxFoodCount / 5; i++) {\n              const cell = getRandomFood();\n              newFood.push(cell);\n              if (prevFood.length + newFood.length === maxFoodCount) {\n                break;\n              }\n            }\n            return prevFood.concat(newFood);\n          }\n          return prevFood;\n        });\n      }\n\n      interval = setInterval(() => {\n        makeFood();\n      }, FOOD_SPAWN_SPEED);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [gameOver]);\n\n  function getRandomFood() {\n    let x = Math.floor(Math.random() * WIDTH);\n    let y = Math.floor(Math.random() * HEIGHT);\n\n    const foodOption =\n      FOOD_OPTIONS[Math.floor(Math.random() * FOOD_OPTIONS.length)];\n    return { x, y, ...foodOption };\n  }\n\n  function reset() {\n    setSnake([{ x: 0, y: 0 }]);\n    setStomach([]);\n    setDirection(\"right\");\n    setScore(0);\n    setIntervalId(null);\n    setGameOver(false);\n  }\n\n  function render() {\n    const { gridSize, landscape, navPadSize } = layout.current;\n    return (\n      <div className={\"game \" + (settings.theme ? settings.theme.key : \"\")}>\n        {(settings && !settings.userName) && (\n          <UserName\n            initialCheck={true}\n            settings={settings}\n            updateSettings={setSettings}\n          />\n        )}\n        {gameOver && (\n          <GameOver\n            score={score}\n            userName={settings.userName}\n            playAgain={reset}\n          />\n        )}\n        <div\n          className=\"main\"\n          style={{\n            width: gridSize.width + \"px\",\n            height: gridSize.height + \"px\",\n          }}\n        >\n          <div className=\"header\">\n            <div className=\"left\">\n              <Menu settings={settings} updateSettings={setSettings} />\n            </div>\n            <div className=\"center\">\n              {settings.theme ? settings.theme.value : themes.candySnake.value}\n            </div>\n            <div className=\"right\">{score}</div>\n          </div>\n          <Board grid={grid} showGridBorder={settings.showGridBorder} />\n        </div>\n        <NavPad\n          onClick={changeDirection}\n          width={navPadSize.width}\n          height={navPadSize.height}\n          landscape={landscape}\n          vibration={settings.vibration}\n        />\n      </div>\n    );\n  }\n  return render();\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './components/Game/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}